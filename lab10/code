import graphviz

# Create a new directed graph for the Context Diagram (Level 0 DFD)
context_dfd = graphviz.Digraph(format='png')
context_dfd.attr(rankdir='LR', size='10')

# Define system boundary as a box
context_dfd.node('NBI_System', 'NBI Information System', shape='rectangle', style='filled', color='lightgrey')

# Define external entities as ovals
entities = {
    "Customers": "Customers",
    "Vendors": "Vendors",
    "Accounting": "Accounting Department",
    "Inventory": "Inventory System",
    "Customer_Service": "Customer Service and Distribution Department"
}

for entity, label in entities.items():
    context_dfd.node(entity, label, shape='oval')

# Define interactions (data flows) between entities and NBI Information System
# Customers <-> NBI System
context_dfd.edge('Customers', 'NBI_System', label='Order Information, Return Requests')
context_dfd.edge('NBI_System', 'Customers', label='Order Confirmation, Return Status, Invoices')

# Vendors <-> NBI System
context_dfd.edge('Vendors', 'NBI_System', label='Vendor Orders, Return Requests')
context_dfd.edge('NBI_System', 'Vendors', label='Order Confirmations, Return Status')

# Accounting <-> NBI System
context_dfd.edge('Accounting', 'NBI_System', label='Billing Information, Customer Data')
context_dfd.edge('NBI_System', 'Accounting', label='Updated Billing, Financial Reports')

# Inventory System <-> NBI System
context_dfd.edge('Inventory', 'NBI_System', label='Inventory Update Requests')
context_dfd.edge('NBI_System', 'Inventory', label='Updated Inventory Status, Validation Results')

# Customer Service and Distribution <-> NBI System
context_dfd.edge('Customer_Service', 'NBI_System', label='Order Details, Customer Data')
context_dfd.edge('NBI_System', 'Customer_Service', label='Updated Order Status, Return Updates, Shipping Information')

# Render the diagram
context_dfd.render('/mnt/data/NBI_Context_DFD')

# Display the path to the rendered diagram
'/mnt/data/NBI_Context_DFD.png'
